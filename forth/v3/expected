=============================
builds.4th
0 prompt
z" BUILDS.4th ..." type cr
\ testing the dreaded <builds/does via constant
: const <builds , does> @ ;
11 const eleven
12 const twelve
z" Expect 11:" type cr
eleven . cr
z" Expect 12" type cr
twelve . cr
z" Expect 11:" type cr
eleven . cr
z" Expect 12" type cr
twelve . cr
z" ... finished" type cr
1 prompt
---
BUILDS.4th ...
Expect 11:
11 
Expect 12
12 
Expect 11:
11 
Expect 12
12 
... finished
  ok

=============================
case.4th
0 prompt

\ case statement implemented as per jonesforth

\ DEFINE WORDS

: ?DUP dup if dup then ;

: CASE  0 ; immediate

: OF 
	postpone  OVER 
	postpone = 
	postpone IF
	postpone DROP 
; immediate

: ENDOF  postpone ELSE	; immediate

: ENDCASE 
	postpone DROP 

	BEGIN
		   ?DUP  
	WHILE
		postpone THEN
	REPEAT
; immediate


\ NOW USE THEM
: x
	3 case
		2  of ." a" endof
		3  of ." b" endof
		." unhandled case" cr
	endcase
;

." Expect: b" cr
x cr
---
Expect: b
b

=============================
colon1.4th
0 prompt
: ho hi ;
ho
---
hello world

=============================
defer.4th
0 prompt

defer foo
 : s 666 . cr ;
foo

' hi is foo
foo

: x ." hello from x" cr ;
' x is foo
foo 


 : y ." caoi from y" cr ;
 ' y is foo
foo
---
DEFER not set
hello world
hello from x
caoi from y

=============================
life.4th
0 prompt
: life 42 ;
life .s
---
Stack: (1):42 
=============================
literal.4th
0 prompt
: f  [ 1 2 + ] literal  ;
." Expect: 3 3" cr
f  . f  . cr

: g [ f 1 + ] literal . ;
." Expect: 4 4" cr
g g cr

: n23     23  postpone literal    ; immediate
: nn n23 . cr ;
." Expect 23:" cr
nn
." Expect 23:" cr
nn

.s cr
---
Expect: 3 3
3 3 
Expect: 4 4
4 4 
Expect 23:
23 
Expect 23:
23 
Stack: (0):

=============================
pick.4th
0 prompt
: 4drop drop drop drop drop ;
." Expect 4 3 2 3:" cr
4 3 2 over .s cr
4drop
." Expect 10 11 12 13 11:" cr
10 11 12 13 2 pick .s cr
---
Expect 4 3 2 3:
Stack: (4):4 3 2 3 
Expect 10 11 12 13 11:
Stack: (5):10 11 12 13 11 

=============================
poly.4th
0 prompt
\ lets play with polymorphism

\ : @f* @ swap @ f* ;

: cell+ cell + ;
: t! cell+ ! ;
: t@ cell+ @ ;

: tf* swap t@ f* ;
create t:flt ' f. , ' tf* ,

: t* swap t@ * ;
create t:int ' .  , ' t* ,


: terr "Operation not supported" type cr ;
create t:str ' type , ' terr ,

: t. dup t@ swap @ 0 cells+ @ execute ;
: t* dup t@ swap @ 1 cells+ @ execute ;

create f1 t:flt , 0 ,
create f2 t:flt , 0 ,

\ variable f1
12.3 f1 t!
11.0 f2 t!
f1 f2 t*
f1 t!
f1 t. cr

create i1 t:int , 0 ,
create i2 t:int , 0 ,

12 i1 t!
11 i2 t!
i1 i2 t*
i1 t!
i1 t. cr


create s1 t:str , 0 ,
"hello world" s1 t!
s1 t. cr
.s
cr
---
135.300000 
132 
hello world
Stack: (0):

=============================
postpone.4th
0 prompt
: end postpone then ; immediate
\ see end
: x if 2 . end 3 . cr ;
\ see x
." Expect 3" cr
0 x
." Expect 2 3" cr
1 x

: ?again1 	postpone ?branch , ; immediate
\ see ?again1

: y 		5 begin dup . 1 - dup ?again1 drop cr ;
." Expect 5 4 3 2 1" cr
y

: ?again2	postpone ?again1 ; immediate
: y 		5 begin dup . 1 - dup ?again2 drop cr ;
." Expect 5 4 3 2 1" cr
y
---
Expect 3
3 
Expect 2 3
2 3 
Expect 5 4 3 2 1
5 4 3 2 1 
Expect 5 4 3 2 1
5 4 3 2 1 

=============================
rstack.4th
0 prompt

." Expect 2" cr
: t1 2 >R R> . ;
t1
---
Expect 2
2 
=============================
strings.4th
0 prompt
\ Test out strings
." Expect: <hello world>" cr
"<hello world>" type cr cr


." Expect: <hello again>" cr
: s "<hello " "again>" swap type type cr ;
s

---
Expect: <hello world>
<hello world>

Expect: <hello again>
<hello again>

=============================
tick.4th
0 prompt
' hi execute

---
hello world

=============================
var.4th
0 prompt
variable foo
43 foo ! foo @ .
---
43 
=============================
while.4th
0 prompt

: test 6 begin 1 - dup while dup . repeat drop ;
." Expect: 5 4 3 2 1" cr
test cr
.s
---
Expect: 5 4 3 2 1
5 4 3 2 1 
Stack: (0):
=============================
../v1/again.4th
0 prompt
: begin here ; immediate
: ?again compile ?branch , ; immediate
: test 5 begin dup . 1 - dup ?again drop ;

." about to run test" cr
test
cr
---
about to run test
5 4 3 2 1 

=============================
../v1/builds.4th
0 prompt
z" BUILDS.4th ..." type cr
\ testing the dreaded <builds/does via constant
\ : constant <builds , does> @ ;
11 constant eleven
12 constant twelve
z" Expect 11:" type cr
eleven . cr
z" Expect 12" type cr
twelve . cr
z" Expect 11:" type cr
eleven . cr
z" Expect 12" type cr
twelve . cr
z" ... finished" type cr
1 prompt
---
BUILDS.4th ...
Expect 11:
11 
Expect 12
12 
Expect 11:
11 
Expect 12
12 
... finished
  ok

=============================
../v1/embed.4th
0 prompt
: h1 hi ;
: h2 h1 ;
h2

---
hello world

=============================
../v1/if.4th
0 prompt
: .test cr type cr ;

z" vanilla if-then. Expect no output" .test
: t1 if 16 . then  ; 
0 t1

z" Expect 16" .test
2 t1

z" if/then/else. Expect 42" .test
: t2 if 42 . else 43 . then cr ;
23 t2

z" Expect 43" .test
0 t2

z" Finished" .test
---

vanilla if-then. Expect no output

Expect 16
16 
if/then/else. Expect 42
42 

Expect 43
43 

Finished

=============================
../v1/test.4th
0 prompt
1 .  1 : t1 1+ 1+ 1+ ; 	t1 . 
2 .  0 : t2 t1 t1 ; 	t2 .
3 .  0 : t3 t2 ;	t3 .
4 .  0 ' t3 execute .
5 . variable bar 5 bar ! bar @ .
6 . : t6 5 [ here ] dup . 1 - dup ?branch [ , ] ; t6
---
1 4 2 6 3 6 4 6 5 5 6 5 4 3 2 1 
