-----------------------------------------------------------------------
CAT: FLOATS

As of 13-Feb-2020, bbf supports floats, inc. the words:
F. F*


-----------------------------------------------------------------------
CAT: STRINGS

The word z" exists to create 0-terminated strings. The preferred 
mechanism from Feb 2020 onwards is just to use regular C-style strings
"like so".

See the strings.4th file for more examples.


-----------------------------------------------------------------------
$CREATE ( str -- )

Create word identified by str.

Equivalent of create str

Example:
"foo" $create 42 ,
foo @ . \ outputs 42


-----------------------------------------------------------------------
++ ( addr -- )

Increments a variable

Example:
variable id
id ++ 
id ++
id @ . \ outputs 2


-----------------------------------------------------------------------
%0ND ( int n -- )

Print int to n places, with leading 0's.

Example:
12 4 %0nd \ outputs 0012
-12 3 %nd \ outputs -012


-----------------------------------------------------------------------
[CHAR] immediate

Push the first char in the next word onto the stack.

Example:
[char] x emit \ outputs x


-----------------------------------------------------------------------
F.

Print float.

Example:
12.3 F. \ outputs 12.3


-----------------------------------------------------------------------
F*

Multiply the first two items on stacks as if they were floats:

Example:
10.1 0.1 F* F. \ outputs 1.01


-----------------------------------------------------------------------
FNEG ( flt -- -flt)

Float negation

Evample
12.3 fneg f. \ outputs -12.3


-----------------------------------------------------------------------
OVER ( a b -- a b a )

Equivalent of 1 pick

Example:
11 12 OVER

Stack becomes:
11 12 11


-----------------------------------------------------------------------
PICK ( x0 ... xu u -- x0 ... xu x0 )

Example:
11 12 13  2 pick

Stack becomes:
11 12 13 11

See OVER


-----------------------------------------------------------------------
PT

Process Token


-----------------------------------------------------------------------
REFILL ( -- flag )

Reads current input stream, and puts it into TIB (The Input Buffer)


-----------------------------------------------------------------------
REPEAT immediate

See WHILE


-----------------------------------------------------------------------
ROUND ( float -- int )

Round float to nearest int, but round halfway cases away from 0.

Examples:
12.3 round . \ outputs 12
12.5 round . \ outputs 13
-12.5 round . \ outputs -13
 

-----------------------------------------------------------------------
STR= ( str1 str2 -- flag )

Is str1 == str2?


-----------------------------------------------------------------------
STR< ( str1 str2 -- flag )

Is str1 < str2?


-----------------------------------------------------------------------
TIB ( -- addr )

Put the address of TIB on the stack


-----------------------------------------------------------------------
WHILE immediate (BEGIN ... WHILE ... REPEAT)

Example:
: test 6 begin 1 - dup while dup . repeat drop ;
test

Output:
5 4 3 2 1
