-----------------------------------------------------------------------
CAT: FLOATS

As of 13-Feb-2020, bbf supports floats, inc. the words:
F. F*


-----------------------------------------------------------------------
CAT: STRINGS

The word z" exists to create 0-terminated strings. The preferred 
mechanism from Feb 2020 onwards is just to use regular C-style strings
"like so".

See the strings.4th file for more examples.


-----------------------------------------------------------------------
$CREATE ( str -- )

Create word identified by str.

Equivalent of create str

Example:
"foo" $create 42 ,
foo @ . \ outputs 42


-----------------------------------------------------------------------
%ND ( int n -- )

Print int to n places, with leading spaces.

Example:
\                   1234
12  4 %nd \ outputs   12
-12 4 %nd \ outputs  -12


-----------------------------------------------------------------------
%0ND ( int n -- )

Print int to n places, with leading 0's.

Example:
12 4 %0nd \ outputs 0012
-12 3 %nd \ outputs -012


-----------------------------------------------------------------------
)LINES

Counterpart of LINES(.

See VARS for and example.


-----------------------------------------------------------------------
++ ( addr -- )

Increments a variable

Example:
variable id
id ++ 
id ++
id @ . \ outputs 2


-----------------------------------------------------------------------
['] ( -- xt ) immediate

Like ', but for compilation.

Definition:
: [']          ' postpone literal ; immediate

Example:
: ho ['] hi execute ;
ho \ outputs hello world


-----------------------------------------------------------------------
[CHAR] immediate

Push the first char in the next word onto the stack.

Example:
[char] x emit \ outputs x


-----------------------------------------------------------------------
`

Equivalent of POSTPONE.

Definition:
: ` postpone postpone ; immediate


-----------------------------------------------------------------------
BRANCH

Originally implemented as:
void p_branch() { RTOP = dref((void*) RTOP); }

Now implemented as:
: BRANCH       r> @ >r ;


-----------------------------------------------------------------------
CEIL ( f -- i )

Takes a float from top of the stack, takes its ceiling, then pushes
that int to the stack

Example:
10.3 ceil . \ outputs 11



-----------------------------------------------------------------------
CELL+ ( n -- n)

Implementation:
: CELL+        cell + ;


-----------------------------------------------------------------------
COMPILE

Implementation:
: COMPILE      r> dup @ , cell+ >r ;

Original implementation:
void p_compile() 
{       
        cell_t cell = dref((void*)RTOP);
        heapify(cell);
        RTOP += sizeof(cell_t);
} 

-----------------------------------------------------------------------
EXIT

Implementation:
: EXIT         ;

Effectively a no-op, as `docol' just uses it as a marker to
stop its inner interpretation.

It is the first word defined, as all defined words rely on its
presence.


-----------------------------------------------------------------------
F.

Print float.

Example:
12.3 F. \ outputs 12.3


-----------------------------------------------------------------------
F*

Multiply the first two items on stacks as if they were floats:

Example:
10.1 0.1 F* F. \ outputs 1.01


-----------------------------------------------------------------------
FIND ( str -- xt )

Find a word, returning its xt. 0 on word not found.

Example 1:
"hi" find execute \ prints hello world

Example 2:
parse-word hi find execute \ prints hello world

Example 3:
variable foo
33 foo !
"foo" find cell + @ . \ prints 33


-----------------------------------------------------------------------
FLOOR ( f -- i )

Takes a float from top of the stack, takes its floor, then pushes
that int to the stack

Example:
10.3 ceil . \ outputs 10


-----------------------------------------------------------------------
FNEG ( flt -- -flt)

Float negation

Evample
12.3 fneg f. \ outputs -12.3


-----------------------------------------------------------------------
IF

Implementation 1:
: IF           postpone 0branch here 0 , ; immediate

Implementation 2:
: IF           compile 0branch here 0 , ; immediate
 
Implementation 2 was introduced on 21-Apr-2020, superceding 1. The
rationale is that the implementation of POSTPONE requires 
conditional branching (i.e. IF), creating a "chicken and egg"
situation. COMPILE works on non-immediate words (of which 0BRANCH
is one). Implementation 2 therefore breaks the cyclic dependency.


-----------------------------------------------------------------------
IMMEDIATE? ( xt -- flag)

Is an xt an immediate word?

Examples:
' find immediate? . \ => 0
' postpone immediate? . \ => 1


-----------------------------------------------------------------------
LINE(

Counterpart of )LINE. See VARS for an example


-----------------------------------------------------------------------
LITERAL immediate

Implementation:
: LITERAL      postpone lit  ,   ; immediate

Original implementation:
void p_literal () { cell_t v = pop(); embed_literal(v); }


-----------------------------------------------------------------------
NEG  ( n -- -n)

Integer negation

Example:
11 neg . \ outputs -11


-----------------------------------------------------------------------
OVER ( a b -- a b a )

Equivalent of 1 pick

Example:
11 12 OVER

Stack becomes:
11 12 11


-----------------------------------------------------------------------
PICK ( x0 ... xu u -- x0 ... xu x0 )

Example:
11 12 13  2 pick

Stack becomes:
11 12 13 11

See OVER


-----------------------------------------------------------------------
POSTPONE immediate

Original implementation:

void p_postpone ()
{
	parse_word();
	codeptr cfa = (codeptr) cfa_find(token);
	if(!is_immediate(cfa)) 
		heapify_word("COMPILE");
	heapify_word(token);
}

...  {F_IMM,	"POSTPONE", p_postpone}, ...

New Implementation on 22-Apr-2020:

: POSTPONE	parse-word find dup immediate? if else compile compile then , ; immediate


-----------------------------------------------------------------------
PT

Process Token


-----------------------------------------------------------------------
REFILL ( -- flag )

Reads current input stream, and puts it into TIB (The Input Buffer)


-----------------------------------------------------------------------
REPEAT immediate

See WHILE


-----------------------------------------------------------------------
ROUND ( float -- int )

Round float to nearest int, but round halfway cases away from 0.

Examples:
12.3 round . \ outputs 12
12.5 round . \ outputs 13
-12.5 round . \ outputs -13
 

-----------------------------------------------------------------------
STR= ( str1 str2 -- flag )

Is str1 == str2?


-----------------------------------------------------------------------
STR< ( str1 str2 -- flag )

Is str1 < str2?


-----------------------------------------------------------------------
TIB ( -- addr )

Put the address of TIB on the stack


-----------------------------------------------------------------------
VARS:

Creates mutliple variables until EOL

Example:
vars: foo bar baz
is equivalent of variable foo variable bar variable baz

Implementation 1:
: VARS:        begin parse-word dup while $create 0 , repeat drop ;

Implementation 2:
: VARS:      line( $create 0 , )line ;


Discusssion:
https://mcturra2000.wordpress.com/2020/02/16/forthlang-ninja-development/


-----------------------------------------------------------------------
WHILE immediate (BEGIN ... WHILE ... REPEAT)

Example:
: test 6 begin 1 - dup while dup . repeat drop ;
test

Output:
5 4 3 2 1
